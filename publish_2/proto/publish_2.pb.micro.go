// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/publish_2.proto

package publish_2

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Publish2 service

func NewPublish2Endpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Publish2 service

type Publish2Service interface {
	PublishAction(ctx context.Context, in *DouyinPublishActionRequest, opts ...client.CallOption) (*DouyinPublishActionResponse, error)
	PublishList(ctx context.Context, in *DouyinPublishListRequest, opts ...client.CallOption) (*DouyinPublishListResponse, error)
}

type publish2Service struct {
	c    client.Client
	name string
}

func NewPublish2Service(name string, c client.Client) Publish2Service {
	return &publish2Service{
		c:    c,
		name: name,
	}
}

func (c *publish2Service) PublishAction(ctx context.Context, in *DouyinPublishActionRequest, opts ...client.CallOption) (*DouyinPublishActionResponse, error) {
	req := c.c.NewRequest(c.name, "Publish2.PublishAction", in)
	out := new(DouyinPublishActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publish2Service) PublishList(ctx context.Context, in *DouyinPublishListRequest, opts ...client.CallOption) (*DouyinPublishListResponse, error) {
	req := c.c.NewRequest(c.name, "Publish2.PublishList", in)
	out := new(DouyinPublishListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Publish2 service

type Publish2Handler interface {
	PublishAction(context.Context, *DouyinPublishActionRequest, *DouyinPublishActionResponse) error
	PublishList(context.Context, *DouyinPublishListRequest, *DouyinPublishListResponse) error
}

func RegisterPublish2Handler(s server.Server, hdlr Publish2Handler, opts ...server.HandlerOption) error {
	type publish2 interface {
		PublishAction(ctx context.Context, in *DouyinPublishActionRequest, out *DouyinPublishActionResponse) error
		PublishList(ctx context.Context, in *DouyinPublishListRequest, out *DouyinPublishListResponse) error
	}
	type Publish2 struct {
		publish2
	}
	h := &publish2Handler{hdlr}
	return s.Handle(s.NewHandler(&Publish2{h}, opts...))
}

type publish2Handler struct {
	Publish2Handler
}

func (h *publish2Handler) PublishAction(ctx context.Context, in *DouyinPublishActionRequest, out *DouyinPublishActionResponse) error {
	return h.Publish2Handler.PublishAction(ctx, in, out)
}

func (h *publish2Handler) PublishList(ctx context.Context, in *DouyinPublishListRequest, out *DouyinPublishListResponse) error {
	return h.Publish2Handler.PublishList(ctx, in, out)
}
